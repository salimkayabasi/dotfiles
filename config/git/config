[user]
	name = Salim KAYABASI
	email = salim.kayabasi@gmail.com

[github]
	user = salimkayabasi

[core]
	excludesfile = ~/.config/git/ignore
	editor = /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w
	filemode = false
	trustctime = false
	autocrlf = input
	eol = lf
	untrackedCache = true
	pager = diff-so-fancy | less --tabs=4 -RFX
	ignorecase = false

[credential]
	helper = osxkeychain

[grep]
	lineNumber = true

[help]
	autocorrect = 1

[push]
	default = simple
	followTags = true

[fetch]
	prune = true

[alias]
	ci = commit
	cr = clone --recursive
	df = diff --word-diff
	g = grep --break --heading --line-number
	l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	ld = "!sh -c \"git log --since '${1:-1} days ago' --oneline --author $(git config user.email)\" -"
	ll = log --pretty=oneline --graph --abbrev-commit
	lm = log --pretty=format:'* %s (%h)'
	patch = !git --no-pager diff --no-color
	p = push
	pf = push --force
	pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	show-ignored = "! git clean -ndX | perl -pe 's/Would remove/Ignored:/'"
	stl = ls-files -m -o --exclude-standard
	unstage = reset --hard HEAD
	default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
	co = checkout
	st = status -sb
	ec = config --global -e
	br = branch -vv
	gr = grep -i
	del = branch -D
	rank = shortlog -sn --no-merges
	ls = !git branch -r && git br
	up = !git pull --rebase --prune $@ && git submodule update --init --recursive
	cob = checkout origin/HEAD -b
	task = "!f(){ git checkout origin/HEAD -b WES-${1} && git status; };f"
	cm = !git add -A && git commit -m
	save = !git add -A && git commit -m 'SAVEPOINT'
	undo = reset HEAD~1 --mixed
	amend = commit -a --amend
	track = branch -u origin/HEAD
	ren = branch -m
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
	bclean = "!f() { DEFAULT=$(git default); git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; }; f"
	bdone = "!f() { DEFAULT=$(git default); git checkout ${1-$DEFAULT} && git up && git bclean ${1-$DEFAULT}; }; f"
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	cp = cherry-pick
	lg = log --oneline
	clog = "!f() { git log `git describe --tags --abbrev=0`..HEAD --pretty=format:' * %s (%an)' | grep -v 'Merge pull request';}; f"
	# Commit changes to current head as amended commit
	plus = commit --amend -a -C HEAD
	# clean repository
	crepo = filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch filename' --prune-empty -f -- --all
	# tag version
	addTag = "!f() { DEFAULT=$(git default); git co ${1-$DEFAULT} && git up && git tag -a v${1} -m "v${1}" && git tag;}; f"
	delTag = "!f() { git tag -d v${1} && git push origin :refs/tags/v${1} && git tag;}; f"

[diff]
	renames = copies
	indentHeuristic = true
	tool = Kaleidoscope
[difftool]
	prompt = false
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "sourcetree"]
	cmd = /usr/local/bin/ksdiff -w \"$LOCAL\" \"$REMOTE\"
	path =

[svn]
	followparent = true
[branch]
	autosetuprebase = always
[log]
	date = relative

[merge]
	tool = Kaleidoscope
	conflictstyle = diff3
	defaultToUpstream = true
[mergetool]
	prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[mergetool "sourcetree"]
	cmd = /usr/local/bin/ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true

[color]
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[pull]
	rebase = true
